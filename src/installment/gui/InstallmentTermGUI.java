/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package installment.gui;

import installment.calculator.LoanCalculator;
import installment.enums.PayFrequency;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bryan
 */
public class InstallmentTermGUI extends javax.swing.JFrame {

    private LoanCalculator calculator;
    private DateFormat df;
    private NumberFormat nf;
    private int payFrequency;
    private DefaultTableModel loanScheduleTableModel;

    /**
     * Creates new form InstallmentTermGUI
     */
    public InstallmentTermGUI() throws ParseException {
        calculator = new LoanCalculator();
        df = DateFormat.getDateInstance(DateFormat.SHORT);

        nf = NumberFormat.getNumberInstance();
        nf.setMinimumFractionDigits(3);

        initLoanScheduleTableModel();
        initComponents();



        calculate();
    }

    private void initLoanScheduleTableModel() {
        loanScheduleTableModel = new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
            "Payment #", "Payment Amount", "Principal", "Interest", "Payoff Amount"}) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class,
                java.lang.String.class, java.lang.String.class,
                java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        payFreqButtonGroup = new javax.swing.ButtonGroup();
        principalLabel = new javax.swing.JLabel();
        aprLabel = new javax.swing.JLabel();
        aprPercentLabel = new javax.swing.JLabel();
        termLabel = new javax.swing.JLabel();
        termSlider = new javax.swing.JSlider();
        monthLabel = new javax.swing.JLabel();
        payFreqLabel = new javax.swing.JLabel();
        weeklyPayFreqButton = new javax.swing.JRadioButton();
        biweeklyPayFreqButton = new javax.swing.JRadioButton();
        semimonthlyPayFreqButton = new javax.swing.JRadioButton();
        monthlyPayFreqButton = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        loanScheduleTable = new javax.swing.JTable();
        paymentLabel = new javax.swing.JLabel();
        installPayValLabel = new javax.swing.JLabel();
        printButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        principalSlider = new javax.swing.JSlider();
        principalTextField = new javax.swing.JTextField();
        dollarSignLabel = new javax.swing.JLabel();
        aprTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        principalLabel.setText("Principal");

        aprLabel.setText("APR");

        aprPercentLabel.setText("%");

        termLabel.setText("Duration");

        termSlider.setMajorTickSpacing(1);
        termSlider.setMaximum(15);
        termSlider.setMinimum(6);
        termSlider.setPaintLabels(true);
        termSlider.setPaintTicks(true);
        termSlider.setSnapToTicks(true);
        termSlider.setValue(9);
        termSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                termSliderStateChanged(evt);
            }
        });

        monthLabel.setText("(Months)");

        payFreqLabel.setText("Pay Freq");

        payFreqButtonGroup.add(weeklyPayFreqButton);
        weeklyPayFreqButton.setText("Weekly");
        weeklyPayFreqButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weeklyPayFreqButtonActionPerformed(evt);
            }
        });

        payFreqButtonGroup.add(biweeklyPayFreqButton);
        biweeklyPayFreqButton.setSelected(true);
        biweeklyPayFreqButton.setText("Bi-weekly");
        biweeklyPayFreqButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                biweeklyPayFreqButtonActionPerformed(evt);
            }
        });

        payFreqButtonGroup.add(semimonthlyPayFreqButton);
        semimonthlyPayFreqButton.setText("Semi-monthly");
        semimonthlyPayFreqButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semimonthlyPayFreqButtonActionPerformed(evt);
            }
        });

        payFreqButtonGroup.add(monthlyPayFreqButton);
        monthlyPayFreqButton.setText("Monthly");
        monthlyPayFreqButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthlyPayFreqButtonActionPerformed(evt);
            }
        });

        loanScheduleTable.setModel(loanScheduleTableModel);
        jScrollPane2.setViewportView(loanScheduleTable);

        paymentLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        paymentLabel.setText("Bi-Weekly Payment:");

        installPayValLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        installPayValLabel.setForeground(new java.awt.Color(0, 102, 0));
        installPayValLabel.setText("$324.00");

        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        principalSlider.setMajorTickSpacing(100);
        principalSlider.setMaximum(1500);
        principalSlider.setMinimum(300);
        principalSlider.setMinorTickSpacing(50);
        principalSlider.setPaintLabels(true);
        principalSlider.setPaintTicks(true);
        principalSlider.setSnapToTicks(true);
        principalSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                principalSliderStateChanged(evt);
            }
        });

        principalTextField.setText("300");
        principalTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principalTextFieldActionPerformed(evt);
            }
        });

        dollarSignLabel.setText("$");

        aprTextField.setText("600");
        aprTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aprTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(paymentLabel)
                        .addGap(50, 50, 50)
                        .addComponent(installPayValLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(payFreqLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(semimonthlyPayFreqButton)
                            .addComponent(weeklyPayFreqButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(biweeklyPayFreqButton)
                            .addComponent(monthlyPayFreqButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(monthLabel)
                            .addComponent(termLabel)
                            .addComponent(principalLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dollarSignLabel)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(termSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(principalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(aprLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aprPercentLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(aprTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(principalSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(printButton)
                        .addGap(26, 26, 26)
                        .addComponent(exportButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(principalLabel)
                            .addComponent(principalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dollarSignLabel)
                            .addComponent(aprLabel)
                            .addComponent(aprPercentLabel)
                            .addComponent(aprTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(principalSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(termLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monthLabel))
                            .addComponent(termSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(payFreqLabel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(weeklyPayFreqButton)
                                .addComponent(biweeklyPayFreqButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(semimonthlyPayFreqButton)
                            .addComponent(monthlyPayFreqButton))
                        .addGap(121, 121, 121)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paymentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(installPayValLabel)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printButton)
                    .addComponent(exportButton))
                .addContainerGap(125, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void weeklyPayFreqButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weeklyPayFreqButtonActionPerformed
        calculator.setPayFreq(PayFrequency.WEEKLY.getLoanPeriod());
        calculate();
    }//GEN-LAST:event_weeklyPayFreqButtonActionPerformed

    private void biweeklyPayFreqButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biweeklyPayFreqButtonActionPerformed
        calculator.setPayFreq(PayFrequency.BI_WEEKLY.getLoanPeriod());
        calculate();
    }//GEN-LAST:event_biweeklyPayFreqButtonActionPerformed

    private void semimonthlyPayFreqButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semimonthlyPayFreqButtonActionPerformed
        calculator.setPayFreq(PayFrequency.SEMI_MONTHLY.getLoanPeriod());
        calculate();
    }//GEN-LAST:event_semimonthlyPayFreqButtonActionPerformed

    private void monthlyPayFreqButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthlyPayFreqButtonActionPerformed
        calculator.setPayFreq(PayFrequency.MONTHLY.getLoanPeriod());
        calculate();
    }//GEN-LAST:event_monthlyPayFreqButtonActionPerformed

    private void termSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_termSliderStateChanged
        calculator.setTermLength(termSlider.getValue());
        calculate();
    }//GEN-LAST:event_termSliderStateChanged

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        try {
            loanScheduleTable.print();
        } catch (PrinterException ex) {
            printErrorMsg(ex, "unable to print");
        }
    }//GEN-LAST:event_printButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        int colCnt = loanScheduleTable.getColumnCount();
        int rowCnt = loanScheduleTable.getRowCount();
        File csvFile = null;
        File renCsvFile = null;
        String newFileName = "";

        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {


            try {
                csvFile = fc.getSelectedFile();

                newFileName = csvFile.getPath() + ".csv";
                renCsvFile = new File(newFileName);
         
                PrintWriter pw = new PrintWriter(renCsvFile);
                
                for (int i = 0; i < colCnt; ++i) {
                    pw.print(loanScheduleTable.getColumnName(i));

                    if ((i + 1) == colCnt) {
                        pw.print("\n");
                    } else {
                        pw.print(",");
                    }
                }

                for (int row = 0; row < rowCnt; ++row) {
                    for (int col = 0; col < colCnt; ++col) {
                        String value = String.valueOf(loanScheduleTable.getValueAt(row, col));

                        if (value.equalsIgnoreCase("null")) {
                            pw.print("");
                        } else {
                            pw.print(value);
                        }


                        if ((col + 1) == colCnt) {
                            pw.print("\n");
                        } else {
                            pw.print(",");
                        }
                    }
                }

                pw.flush();
                pw.close();
                
                JOptionPane.showMessageDialog(rootPane, "Successfully Saved to " + newFileName, "Information",
                JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                printErrorMsg(ex, "unable to export file");
            }

        } else {
            // nothing to do
        }



    }//GEN-LAST:event_exportButtonActionPerformed

    private void principalSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_principalSliderStateChanged
        principalTextField.setText((String.valueOf(principalSlider.getValue())));
        calculator.setPrincipal(principalSlider.getValue());
        calculate();
    }//GEN-LAST:event_principalSliderStateChanged

    private void principalTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_principalTextFieldActionPerformed
        String prinStr = principalTextField.getText();
        
        try {
            int principal = Integer.parseInt(prinStr);
            calculator.setPrincipal(principal);
            principalSlider.setValue(principal);
        } catch (NumberFormatException nfe) {
            String msg = "Invalid Number: Please enter a valid number for the principal";
            printErrorMsg(nfe, msg);
            return;
        }
        
        calculate();
    }//GEN-LAST:event_principalTextFieldActionPerformed

    private void aprTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aprTextFieldActionPerformed
        calculate();
    }//GEN-LAST:event_aprTextFieldActionPerformed

    private void calculate() {
        int termLength, payFreq;

        loanScheduleTableModel.setRowCount(0);

        // set PDL paydown amount
        try {
            String aprStr = aprTextField.getText();
            calculator.setInstallAPR(Double.parseDouble(aprStr));
        } catch (NullPointerException npe) {
            String msg = "Please enter a number for the APR";
            printErrorMsg(npe, msg);
            return;
        } catch (NumberFormatException nfe) {
            String msg = "Invalid Number: Please enter a valid number for the APR";
            printErrorMsg(nfe, msg);
            return;
        }

        payFreq = calculator.getInstallPayFreq();

        if (payFreq == PayFrequency.MONTHLY.getLoanPeriod()) {
            termLength = calculator.getTermLength();
        } else {
            termLength = calculator.getTermLength() * 2; // set for all but monthly
        }

        // calculate the totalPayments payment amount per period
        calculator.calculateInstallPmt();

        // payday loan payoff amount
        // -----------------------------
        ArrayList<Double> pdlPmts = new ArrayList<Double>();
        pdlPmts = calculator.calculatePdlPayoffAmt();

        int row = 0;
        double principal = (double) calculator.getInstallPrincipal();
        double totalPayments = 0, payment = 0;
        double totalIntPayments = 0, intPayment;
        double totalPrinPayments = 0, prinPayment;
        double balance = principal;
        double payOffAmt;
        while (row < termLength) {
            loanScheduleTableModel.addRow(new Object[][]{null, null, null, null, null, null});

            // set total payment, interest, princpal amounts
            nf.setMaximumFractionDigits(2);
            payment = calculator.getInstallPaymentAmt() * -1;
            intPayment = calculator.calculateInstallIntPmt(row + 1) * -1;
            prinPayment = payment - intPayment;

            // running totals
            totalPrinPayments += prinPayment;
            totalIntPayments += intPayment;
            totalPayments += payment;
            balance -= prinPayment;
            payOffAmt = (payment * (row + 1)) + balance;

            //loanScheduleTable.setValueAt(df.format(dueDate), row, 0);
            loanScheduleTable.setValueAt(row + 1, row, 0);
            loanScheduleTable.setValueAt("$" + nf.format(payment), row, 1);
            loanScheduleTable.setValueAt("$" + nf.format(prinPayment), row, 2);
            loanScheduleTable.setValueAt("$" + nf.format(intPayment), row, 3);
            loanScheduleTable.setValueAt("$" + nf.format(payOffAmt), row, 4);

            ++row;
        }
        // skip a row for spacing
        ++row;

        // add row for totals
        // ------------------
        loanScheduleTableModel.addRow(new Object[][]{null, null});
        loanScheduleTableModel.addRow(new Object[][]{null, null});


        loanScheduleTable.setValueAt("Total", row, 0);
        loanScheduleTable.setValueAt("$" + nf.format(totalPayments), row, 1);
        loanScheduleTable.setValueAt("$" + nf.format(totalPrinPayments), row, 2);

        if (payFreq == PayFrequency.BI_WEEKLY.getLoanPeriod()) {
            paymentLabel.setText("Bi-Weekly Payment:");
        } else if (payFreq == PayFrequency.MONTHLY.getLoanPeriod()) {
            paymentLabel.setText("Monthly Payment:");
        } else if (payFreq == PayFrequency.SEMI_MONTHLY.getLoanPeriod()) {
            paymentLabel.setText("Semi-Monthly Payment:");
        } else {
            paymentLabel.setText("Weekly Payment:");
        }

        installPayValLabel.setText("$" + nf.format(payment));

        nf.setMinimumFractionDigits(3);
    }

    private void printErrorMsg(Exception e, String msg) {
        JOptionPane.showMessageDialog(rootPane, msg, "Error",
                JOptionPane.ERROR_MESSAGE);

        e.printStackTrace();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InstallmentTermGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InstallmentTermGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InstallmentTermGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InstallmentTermGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        System.setProperty("java.util.Arrays.useLegacyMergeSort", "true");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new InstallmentTermGUI().setVisible(true);
                } catch (ParseException ex) {
                    Logger.getLogger(InstallmentTermGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aprLabel;
    private javax.swing.JLabel aprPercentLabel;
    private javax.swing.JTextField aprTextField;
    private javax.swing.JRadioButton biweeklyPayFreqButton;
    private javax.swing.JLabel dollarSignLabel;
    private javax.swing.JButton exportButton;
    private javax.swing.JLabel installPayValLabel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable loanScheduleTable;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JRadioButton monthlyPayFreqButton;
    private javax.swing.ButtonGroup payFreqButtonGroup;
    private javax.swing.JLabel payFreqLabel;
    private javax.swing.JLabel paymentLabel;
    private javax.swing.JLabel principalLabel;
    private javax.swing.JSlider principalSlider;
    private javax.swing.JTextField principalTextField;
    private javax.swing.JButton printButton;
    private javax.swing.JRadioButton semimonthlyPayFreqButton;
    private javax.swing.JLabel termLabel;
    private javax.swing.JSlider termSlider;
    private javax.swing.JRadioButton weeklyPayFreqButton;
    // End of variables declaration//GEN-END:variables
}
